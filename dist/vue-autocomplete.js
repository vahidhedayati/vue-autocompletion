!function(I){function C(C){for(var A,F,n=C[0],l=C[1],e=C[2],i=0,c=[];i<n.length;i++)F=n[i],Object.prototype.hasOwnProperty.call(Q,F)&&Q[F]&&c.push(Q[F][0]),Q[F]=0;for(A in l)Object.prototype.hasOwnProperty.call(l,A)&&(I[A]=l[A]);for(t&&t(C);c.length;)c.shift()();return B.push.apply(B,e||[]),g()}function g(){for(var I,C=0;C<B.length;C++){for(var g=B[C],A=!0,n=1;n<g.length;n++){var l=g[n];0!==Q[l]&&(A=!1)}A&&(B.splice(C--,1),I=F(F.s=g[0]))}return I}var A={},Q={0:0},B=[];function F(C){if(A[C])return A[C].exports;var g=A[C]={i:C,l:!1,exports:{}};return I[C].call(g.exports,g,g.exports,F),g.l=!0,g.exports}F.m=I,F.c=A,F.d=function(I,C,g){F.o(I,C)||Object.defineProperty(I,C,{enumerable:!0,get:g})},F.r=function(I){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(I,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(I,"__esModule",{value:!0})},F.t=function(I,C){if(1&C&&(I=F(I)),8&C)return I;if(4&C&&"object"==typeof I&&I&&I.__esModule)return I;var g=Object.create(null);if(F.r(g),Object.defineProperty(g,"default",{enumerable:!0,value:I}),2&C&&"string"!=typeof I)for(var A in I)F.d(g,A,function(C){return I[C]}.bind(null,A));return g},F.n=function(I){var C=I&&I.__esModule?function(){return I.default}:function(){return I};return F.d(C,"a",C),C},F.o=function(I,C){return Object.prototype.hasOwnProperty.call(I,C)},F.p="";var n=window.webpackJsonp=window.webpackJsonp||[],l=n.push.bind(n);n.push=C,n=n.slice();for(var e=0;e<n.length;e++)C(n[e]);var t=l;B.push([4,1]),g()}([function(module,exports,__webpack_require__){eval("// extracted by mini-css-extract-plugin\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdnVlLWF1dG9jb21wbGV0aW9uLmNzcz84ZTgwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6IjAuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvLyBleHRyYWN0ZWQgYnkgbWluaS1jc3MtZXh0cmFjdC1wbHVnaW4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///0\n")},,,function(module,__webpack_exports__,__webpack_require__){"use strict";eval("/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_vue_autocompletion_css_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(0);\n/* harmony import */ var _node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_vue_autocompletion_css_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_vue_autocompletion_css_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0__);\n/* unused harmony reexport * */\n /* unused harmony default export */ var _unused_webpack_default_export = (_node_modules_mini_css_extract_plugin_dist_loader_js_node_modules_css_loader_index_js_node_modules_vue_loader_lib_loaders_stylePostLoader_js_vue_autocompletion_css_vue_type_style_index_0_lang_css___WEBPACK_IMPORTED_MODULE_0___default.a); \n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvdnVlLWF1dG9jb21wbGV0aW9uLmNzcz9hNjg0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUE7QUFBQTtBQUFtTyxDQUFnQixxVEFBRyxFQUFDIiwiZmlsZSI6IjMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbW9kIGZyb20gXCItIS4uL25vZGVfbW9kdWxlcy9taW5pLWNzcy1leHRyYWN0LXBsdWdpbi9kaXN0L2xvYWRlci5qcyEuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi9ub2RlX21vZHVsZXMvdnVlLWxvYWRlci9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi92dWUtYXV0b2NvbXBsZXRpb24uY3NzP3Z1ZSZ0eXBlPXN0eWxlJmluZGV4PTAmbGFuZz1jc3MmXCI7IGV4cG9ydCBkZWZhdWx0IG1vZDsgZXhwb3J0ICogZnJvbSBcIi0hLi4vbm9kZV9tb2R1bGVzL21pbmktY3NzLWV4dHJhY3QtcGx1Z2luL2Rpc3QvbG9hZGVyLmpzIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uL25vZGVfbW9kdWxlcy92dWUtbG9hZGVyL2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuL3Z1ZS1hdXRvY29tcGxldGlvbi5jc3M/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZsYW5nPWNzcyZcIiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///3\n")},function(module,__webpack_exports__,__webpack_require__){"use strict";eval('__webpack_require__.r(__webpack_exports__);\n\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/VueAutocompletion.vue?vue&type=template&id=78198a70&\nvar render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c("span", { staticClass: "autocomplete " }, [\n    _c("input", {\n      directives: [\n        {\n          name: "model",\n          rawName: "v-model",\n          value: _vm.search,\n          expression: "search"\n        }\n      ],\n      ref: _vm.name,\n      staticClass: "form-control",\n      class: [_vm.clazz, _vm.errorClazz, _vm.randomId],\n      attrs: {\n        type: "search",\n        name: _vm.name,\n        id: _vm.name,\n        disabled: _vm.disabled,\n        readonly: _vm.readonly,\n        autocomplete: _vm.name,\n        placeholder: _vm.placeholder\n      },\n      domProps: { value: _vm.search },\n      on: {\n        input: [\n          function($event) {\n            if ($event.target.composing) {\n              return\n            }\n            _vm.search = $event.target.value\n          },\n          _vm.onChange\n        ],\n        mouseenter: function($event) {\n          _vm.arrowCounter = 0\n        },\n        keydown: [\n          function($event) {\n            if (\n              !$event.type.indexOf("key") &&\n              _vm._k($event.keyCode, "down", 40, $event.key, [\n                "Down",\n                "ArrowDown"\n              ])\n            ) {\n              return null\n            }\n            return _vm.onArrowDown($event)\n          },\n          function($event) {\n            if (\n              !$event.type.indexOf("key") &&\n              _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")\n            ) {\n              return null\n            }\n            return _vm.onTab($event)\n          },\n          function($event) {\n            if (\n              !$event.type.indexOf("key") &&\n              _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])\n            ) {\n              return null\n            }\n            return _vm.onArrowUp($event)\n          },\n          function($event) {\n            if (\n              !$event.type.indexOf("key") &&\n              _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")\n            ) {\n              return null\n            }\n            return _vm.onEnter($event)\n          }\n        ],\n        change: function($event) {\n          return _vm.confirmValue(_vm.search)\n        },\n        blur: _vm.confirmBlur,\n        focus: _vm.confirmFocus\n      }\n    }),\n    _vm._v(" "),\n    _c(\n      "ul",\n      {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.isOpen && !_vm.readonly && !_vm.disabled,\n            expression: "isOpen && !readonly && !disabled"\n          }\n        ],\n        ref: "autocompleteResults",\n        staticClass: "autocomplete-results  form-control",\n        attrs: { id: "autocomplete-results" }\n      },\n      [\n        _vm.isLoading\n          ? _c("li", { staticClass: "loading" }, [\n              _vm._v("\\n      Loading results...\\n    ")\n            ])\n          : _vm._l(_vm.results, function(result, i) {\n              return _c(\n                "li",\n                {\n                  key: i,\n                  ref: "options",\n                  refInFor: true,\n                  staticClass: "autocomplete-items",\n                  class: { "is-active": i === _vm.arrowCounter },\n                  on: {\n                    click: function($event) {\n                      return _vm.setMouseResult(result, i)\n                    }\n                  }\n                },\n                [\n                  _vm._v(\n                    "\\n      " +\n                      _vm._s(\n                        result.hasOwnProperty(_vm.remotePrimaryValue)\n                          ? result[_vm.remotePrimaryValue]\n                          : result[_vm.currentValue]\n                      ) +\n                      "\\n    "\n                  )\n                ]\n              )\n            })\n      ],\n      2\n    ),\n    _vm._v(" "),\n    _c("input", {\n      directives: [\n        {\n          name: "model",\n          rawName: "v-model",\n          value: _vm.hiddenId,\n          expression: "hiddenId"\n        }\n      ],\n      attrs: { type: "hidden", name: "hiddenId" },\n      domProps: { value: _vm.hiddenId },\n      on: {\n        input: function($event) {\n          if ($event.target.composing) {\n            return\n          }\n          _vm.hiddenId = $event.target.value\n        }\n      }\n    })\n  ])\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n\n// CONCATENATED MODULE: ./src/VueAutocompletion.vue?vue&type=template&id=78198a70&\n\n// EXTERNAL MODULE: ./node_modules/jquery/dist/jquery.js\nvar jquery = __webpack_require__(1);\nvar jquery_default = /*#__PURE__*/__webpack_require__.n(jquery);\n\n// CONCATENATED MODULE: ./src/VueAutocompletionLogic.js\n/**\n * Vahid Hedayati 23/11/2019\n *\n * VueAutocompletionLogic centralises all the default properties for:\n *\n * - VueAutocompletion.vue\n * - VueAutocompletionValid.vue\n * ----\n * This now means any future updates for both can be done in this one\n * centralised place. Reducing duplicate changes need in both.\n */\n\n/* harmony default export */ var VueAutocompletionLogic = ({\n    loadProps(loadValidation) {\n        var p = {\n            keyField: {\n                type: String,\n                default: \'id\'\n            },\n            valueField: {\n                type: String,\n                default: \'name\'\n            },\n            remoteKey: {\n                type: String,\n                default: \'\'\n            },\n            remoteValue: {\n                type: String,\n                default: \'\'\n            },\n            remotePrimaryValue: {\n\n                default: \'\'\n            },\n            remoteValueSelect: {\n                type: String,\n                default: \'\'\n            },\n            clazz: {\n                type: String,\n                default: ""\n            },\n            returnPromise: {\n                type: Boolean,\n                required: false,\n                default: false\n            },\n            validationErrors: {\n                type: Array,\n                default: function () {\n                    return [];\n                }\n            },\n            placeholder: {\n                type: String,\n                default: \'name\'\n            },\n\n            selected: {\n                type: Object,\n                required: true,\n                default: function () {\n                    return {};\n                }\n            },\n            name: {\n                type: String,\n                default: \'search\'\n            },\n            overrideClearFunction: {\n                type: Boolean,\n                required: false,\n                default: false\n            },\n            searchLength: {\n                type: Number,\n                required: false,\n                default: 3\n            },\n            additionalProperties: {\n                type: Array,\n                required: false,\n                default: function () {\n                    return [];\n                }\n            },\n            items: {\n                type: Array,\n                required: false,\n                default: function () {\n                    return [];\n                }\n            },\n            isAsync: {\n                type: Boolean,\n                required: false,\n                default: false\n            },\n            setTimeOut: {\n                type: Boolean,\n                required: false,\n                default: false\n            },\n            timeOutPeriod: {\n                type: Number,\n                required: false,\n                default: 300\n            },\n            disabled: {\n                type: Boolean,\n                required: false,\n                default: false\n            },\n            readonly: {\n                type: Boolean,\n                required: false,\n                default: false\n            }\n        };\n        if (loadValidation != undefined && loadValidation === true) {\n            p[\'validation\'] = { type: String, required: false, default: "" };\n            p[\'validationErrors\'] = { type: Array, default: function () {\n                    return [];\n                } };\n        }\n        return p;\n    },\n    loadComputed(loadValidation) {\n        var p = {\n            primaryValue: function () {\n                if (this.remotePrimaryValue) {\n                    return this.remotePrimaryValue;\n                } else {\n                    return this.remoteValue ? this.remoteValue : this.valueField;\n                }\n            },\n            currentValue: function () {\n                return this.remoteValue ? this.remoteValue : this.valueField;\n            },\n            currentKey: function () {\n                return this.remoteKey ? this.remoteKey : this.keyField;\n            }\n        };\n        if (loadValidation != undefined && loadValidation === true) {\n            p[\'errorClazz\'] = function () {\n                return this.errors && this.errors.has(this.name) || this.validationErrors.includes(this.name) ? \'is-invalid\' : \'\';\n            };\n        } else {\n            p[\'errorClazz\'] = function () {\n                return this.validationErrors.includes(this.name) ? \'is-invalid\' : \'\';\n            };\n        }\n        return p;\n    },\n    loadMethods(validationMode) {\n        var p = {\n            onChange: function () {\n                this.searchChanged = true;\n                this.emitBlankDefaults(this.currentSelected[this.valueField] != \'\' || this.currentSelected[this.keyField] != \'\');\n                if (this.search.length >= this.searchLength) {\n                    this.$emit(\'key-press\', this.search);\n                    if (this.isAsync) {\n                        this.isLoading = true;\n                    } else {\n                        this.filterResults();\n                        this.isOpen = true;\n                    }\n                }\n            },\n            filterResults: function () {\n                var rpv = this.remotePrimaryValue;\n                var sch = this.search;\n                var cv = this.currentValue;\n                this.results = this.items.filter(function (item) {\n                    if (item && rpv != undefined && item.hasOwnProperty(rpv)) {\n                        return item[rpv].toLowerCase().indexOf(sch.toLowerCase()) > -1;\n                    } else {\n                        return item[cv] && sch && item[cv].toLowerCase().indexOf(sch.toLowerCase()) > -1;\n                    }\n                });\n            },\n            setMouseResult: function (result, i) {\n                this.$emit(\'method-used\', \'mouse\');\n                this.setResult(result, i);\n            },\n            setResult: function (result, i) {\n                this.arrowCounter = i;\n                this.resultSet = true;\n                var key = this.currentValue;\n                if (this.remotePrimaryValue) {\n                    key = result.hasOwnProperty(this.remotePrimaryValue) ? this.remotePrimaryValue : this.currentValue;\n                }\n                if (this.remoteValueSelect && result.hasOwnProperty(this.remoteValueSelect)) {\n                    key = this.remoteValueSelect;\n                }\n                if (this.returnPromise) {\n                    this.$emit(\'return-promise\', result);\n                    this.found = result[key];\n                    if (this.found.length > 0) {\n                        this.search = this.found;\n                        this.hiddenId = result[this.currentKey];\n                    }\n                    this.isOpen = false;\n                } else {\n                    this.found = result[key];\n                    if (this.found.length > 0) {\n                        this.search = this.found;\n                        this.hiddenId = result[this.currentKey];\n                        var selected = this.selected;\n                        this.additionalProperties.forEach(function (element) {\n                            if (element.objectName) {\n                                if (element.keyField) {\n                                    selected[element.objectName][element.keyField] = result[element.remoteKey ? element.remoteKey : element.keyField];\n                                }\n                                if (element.valueField) {\n                                    selected[element.objectName][element.valueField] = result[element.remoteValue ? element.remoteValue : element.valueField];\n                                }\n                            } else {\n                                if (element.keyField) {\n                                    selected[element.keyField] = result[element.remoteKey ? element.remoteKey : element.keyField];\n                                }\n                                if (element.valueField) {\n                                    selected[element.valueField] = result[element.remoteValue ? element.remoteValue : element.valueField];\n                                }\n                            }\n                        });\n                        selected[this.valueField] = this.search;\n                        selected[this.keyField] = this.hiddenId;\n                        this.$emit(\'input\', selected);\n                        this.$emit(\'search-value\', this.search);\n                        this.$emit(\'search-key\', this.hiddenId);\n                        this.isOpen = false;\n                    } else {\n                        this.emitBlankDefaults(true);\n                        this.isOpen = false;\n                    }\n                }\n            },\n            confirmFocus: function (evt) {\n                this.resultSet = false;\n            },\n            emitBlankDefaults(logic) {\n                if (logic) {\n                    this.search = \'\';\n                    this.hiddenId = \'\';\n                    var selected = this.selected;\n                    selected[this.valueField] = \'\';\n                    selected[this.keyField] = \'\';\n                    this.currentSelected = selected;\n                    this.additionalProperties.forEach(function (element) {\n                        if (element.objectName) {\n                            if (element.keyField) {\n                                selected[element.objectName][element.keyField] = \'\';\n                            }\n                            if (element.valueField) {\n                                selected[element.objectName][element.valueField] = \'\';\n                            }\n                        } else {\n                            if (element.keyField) {\n                                selected[element.keyField] = \'\';\n                            }\n                            if (element.valueField) {\n                                selected[element.valueField] = \'\';\n                            }\n                        }\n                    });\n                    this.$emit(\'input\', selected);\n                    this.$emit(\'search-value\', \'\');\n                    this.$emit(\'search-key\', \'\');\n                }\n            },\n            confirmBlur: function (evt) {\n                if (validationMode) {\n                    setTimeout(function () {\n                        //race condition - need to ensure user selected auto complete\n                        //only with vue-validation involved -\n                        this.emitBlankDefaults(this.found != this.search && this.searchChanged);\n                    }.bind(this), this.timeOutPeriod);\n                } else {\n                    this.emitBlankDefaults(this.found != this.search);\n                }\n            },\n            confirmValue: function (evt) {\n                if (validationMode) {\n                    setTimeout(function () {\n                        // race condition - need to ensure user selected auto complete\n                        // appears to work and is triggered when open auto complete closes so as expected\n                        // only with vue-validation involved -\n                        this.confirmAndSet(evt);\n                    }.bind(this), this.timeOutPeriod);\n                } else {\n                    this.confirmAndSet(evt);\n                }\n            },\n            confirmAndSet(evt) {\n                if (!this.resultSet) {\n                    for (var i = 0; i < this.results.length; i++) {\n                        if (this.results[i].hasOwnProperty(this.remotePrimaryValue)) {\n                            if (this.results[i][this.remotePrimaryValue].toLowerCase() === this.search.toLowerCase()) {\n                                this.isOpen = false;\n                                this.processSearch = false;\n                                this.setResult(this.results[i]);\n                            }\n                        } else {\n                            if (this.results[i][this.currentValue].toLowerCase() === this.search.toLowerCase()) {\n                                this.isOpen = false;\n                                this.processSearch = false;\n                                this.setResult(this.results[i]);\n                            }\n                        }\n                    }\n                    if (this.processSearch && (this.found.length === 0 || this.found.length > 0 && this.search != this.result)) {\n                        this.search = \'\';\n                        this.found = \'\';\n                    }\n                }\n            },\n            onTab: function (evt) {\n                if (this.isOpen) {\n                    if (this.results.length > 0) {\n                        var ix = 0;\n                        if (this.arrowCounter > -1) {\n                            ix = this.arrowCounter; // pick arrow selection otherwise first item\n                        }\n                        this.setResult(this.results[ix]);\n                    }\n                    this.isOpen = false;\n                    this.processSearch = false;\n                    this.arrowCounter = -1;\n                }\n            },\n            isFull: function () {\n                return this.found.length > 0;\n            },\n            onArrowDown: function (evt) {\n                if (this.arrowCounter < this.results.length - 1) {\n                    this.arrowCounter = this.arrowCounter + 1;\n                    this.fixScrolling();\n                }\n            },\n            onArrowUp: function () {\n                if (this.arrowCounter > 0) {\n                    this.arrowCounter = this.arrowCounter - 1;\n                    this.fixScrolling();\n                }\n            },\n            fixScrolling: function () {\n                const liH = this.$refs.options[this.arrowCounter].clientHeight;\n                this.$refs.autocompleteResults.scrollTop = liH * this.arrowCounter;\n            },\n            onEnter: function (e) {\n                this.$emit(\'method-used\', \'keyboard\');\n                //don\'t attempt to submit form\n                e.preventDefault();\n                this.setResult(this.results[this.arrowCounter]);\n                this.isOpen = false;\n                this.arrowCounter = -1;\n            },\n            handleClickOutside: function (evt) {\n                if (!this.$el.contains(evt.target)) {\n                    this.isOpen = false;\n                    this.arrowCounter = -1;\n                }\n            }\n        };\n        return p;\n    },\n    mounted: function (thiss) {\n        document.addEventListener(\'click\', thiss.handleClickOutside);\n        thiss.currentSelected = thiss.selected;\n        if (thiss.selected && thiss.selected[thiss.valueField] && thiss.selected[thiss.keyField]) {\n            thiss.search = thiss.selected[thiss.valueField];\n            thiss.hiddenId = thiss.selected[thiss.keyField];\n            thiss.lastSearch = thiss.search;\n        }\n    },\n    updated: function (thiss) {\n        this.mounted(thiss);\n        if (thiss.overrideClearFunction) {\n            var randomId = thiss.randomId;\n            var main = thiss;\n            jquery_default()(\'.\' + randomId).on(\'search\', function (tt) {\n                if (!tt.value) {\n                    main.hiddenId = \'\';\n                    var selected = main.selected;\n                    selected[main.valueField] = \'\';\n                    selected[main.keyField] = \'\';\n                    main.currentSelected = selected;\n                    main.additionalProperties.forEach(function (element) {\n                        if (element.objectName) {\n                            if (element.keyField) {\n                                selected[element.objectName][element.keyField] = \'\';\n                            }\n                            if (element.valueField) {\n                                selected[element.objectName][element.valueField] = \'\';\n                            }\n                        } else {\n                            if (element.keyField) {\n                                selected[element.keyField] = \'\';\n                            }\n                            if (element.valueField) {\n                                selected[element.valueField] = \'\';\n                            }\n                        }\n                    });\n                    main.$emit(\'input\', selected);\n                }\n            });\n            setTimeout(function (k) {\n                jquery_default()(\'.\' + randomId).off(\'search\');\n            }, 1);\n        }\n    },\n    loadWatch() {\n        return {\n            selected: function (val, oldValue) {\n                if (val[this.valueField] != oldValue[this.valueField]) {\n                    this.search = val[this.valueField];\n                    this.hiddenId = val[this.keyField];\n                    this.lastSearch = this.search;\n                }\n            },\n            items: function (val, oldValue) {\n                if (val.length !== oldValue.length) {\n                    this.results = val;\n                    this.isLoading = false;\n                }\n            }\n        };\n    }\n});\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/VueAutocompletion.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var VueAutocompletionvue_type_script_lang_js_ = ({\n  name: \'vue-autocompletion\',\n  props: VueAutocompletionLogic.loadProps(),\n  computed: VueAutocompletionLogic.loadComputed(),\n  methods: VueAutocompletionLogic.loadMethods(undefined.setTimeOut ? true : false),\n  watch: VueAutocompletionLogic.loadWatch(),\n  updated() {\n    return VueAutocompletionLogic.updated(this);\n  },\n  mounted() {\n    return VueAutocompletionLogic.mounted(this);\n  },\n  destroyed: function () {\n    document.removeEventListener(\'click\', this.handleClickOutside);\n  },\n  data: function () {\n    return {\n      isOpen: false,\n      results: [],\n      search: \'\',\n      found: \'\',\n      hiddenId: \'\',\n      randomId: this.name + \'_\' + Math.floor(Math.random() * 10000 + 1),\n      isLoading: false,\n      resultSet: false,\n      arrowCounter: 0,\n      lastSearch: \'\',\n      searchChanged: false,\n      currentSelected: \'\'\n    };\n  }\n});\n// CONCATENATED MODULE: ./src/VueAutocompletion.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_VueAutocompletionvue_type_script_lang_js_ = (VueAutocompletionvue_type_script_lang_js_); \n// EXTERNAL MODULE: ./src/vue-autocompletion.css?vue&type=style&index=0&lang=css&\nvar vue_autocompletionvue_type_style_index_0_lang_css_ = __webpack_require__(3);\n\n// EXTERNAL MODULE: ./node_modules/vue-loader/lib/runtime/componentNormalizer.js\nvar componentNormalizer = __webpack_require__(2);\n\n// CONCATENATED MODULE: ./src/VueAutocompletion.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar component = Object(componentNormalizer["a" /* default */])(\n  src_VueAutocompletionvue_type_script_lang_js_,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var api; }\ncomponent.options.__file = "src/VueAutocompletion.vue"\n/* harmony default export */ var VueAutocompletion = (component.exports);\n// CONCATENATED MODULE: ./node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/vue-loader/lib??vue-loader-options!./src/VueAutocompletionValid.vue?vue&type=template&id=4053cb78&\nvar VueAutocompletionValidvue_type_template_id_4053cb78_render = function() {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c("span", { staticClass: "autocomplete " }, [\n    _c("input", {\n      directives: [\n        {\n          name: "validate",\n          rawName: "v-validate",\n          value: _vm.validation,\n          expression: "validation"\n        },\n        {\n          name: "model",\n          rawName: "v-model",\n          value: _vm.search,\n          expression: "search"\n        }\n      ],\n      ref: _vm.name,\n      staticClass: "form-control",\n      class: [_vm.clazz, _vm.errorClazz, _vm.randomId],\n      attrs: {\n        type: "search",\n        name: _vm.name,\n        id: _vm.name,\n        disabled: _vm.disabled,\n        readonly: _vm.readonly,\n        autocomplete: _vm.name,\n        placeholder: _vm.placeholder\n      },\n      domProps: { value: _vm.search },\n      on: {\n        input: [\n          function($event) {\n            if ($event.target.composing) {\n              return\n            }\n            _vm.search = $event.target.value\n          },\n          _vm.onChange\n        ],\n        mouseenter: function($event) {\n          _vm.arrowCounter = 0\n        },\n        keydown: [\n          function($event) {\n            if (\n              !$event.type.indexOf("key") &&\n              _vm._k($event.keyCode, "down", 40, $event.key, [\n                "Down",\n                "ArrowDown"\n              ])\n            ) {\n              return null\n            }\n            return _vm.onArrowDown($event)\n          },\n          function($event) {\n            if (\n              !$event.type.indexOf("key") &&\n              _vm._k($event.keyCode, "tab", 9, $event.key, "Tab")\n            ) {\n              return null\n            }\n            return _vm.onTab($event)\n          },\n          function($event) {\n            if (\n              !$event.type.indexOf("key") &&\n              _vm._k($event.keyCode, "up", 38, $event.key, ["Up", "ArrowUp"])\n            ) {\n              return null\n            }\n            return _vm.onArrowUp($event)\n          },\n          function($event) {\n            if (\n              !$event.type.indexOf("key") &&\n              _vm._k($event.keyCode, "enter", 13, $event.key, "Enter")\n            ) {\n              return null\n            }\n            return _vm.onEnter($event)\n          }\n        ],\n        change: function($event) {\n          return _vm.confirmValue(_vm.search)\n        },\n        blur: _vm.confirmBlur,\n        focus: _vm.confirmFocus\n      }\n    }),\n    _vm._v(" "),\n    _vm.errors && _vm.errors.has(_vm.name)\n      ? _c("div", { staticClass: "col-sm-12 alert alert-danger" }, [\n          _vm._v(_vm._s(_vm.errors.first(_vm.name)))\n        ])\n      : _vm._e(),\n    _vm._v(" "),\n    _c(\n      "ul",\n      {\n        directives: [\n          {\n            name: "show",\n            rawName: "v-show",\n            value: _vm.isOpen && !_vm.readonly && !_vm.disabled,\n            expression: "isOpen && !readonly && !disabled"\n          }\n        ],\n        ref: "autocompleteResults",\n        staticClass: "autocomplete-results  form-control",\n        attrs: { id: "autocomplete-results" }\n      },\n      [\n        _vm.isLoading\n          ? _c("li", { staticClass: "loading" }, [\n              _vm._v("\\n          Loading results...\\n        ")\n            ])\n          : _vm._l(_vm.results, function(result, i) {\n              return _c(\n                "li",\n                {\n                  key: i,\n                  ref: "options",\n                  refInFor: true,\n                  staticClass: "autocomplete-items",\n                  class: { "is-active": i === _vm.arrowCounter },\n                  on: {\n                    click: function($event) {\n                      return _vm.setMouseResult(result, i)\n                    }\n                  }\n                },\n                [\n                  _vm._v(\n                    "\\n           " +\n                      _vm._s(\n                        result.hasOwnProperty(_vm.remotePrimaryValue)\n                          ? result[_vm.remotePrimaryValue]\n                          : result[_vm.currentValue]\n                      ) +\n                      "\\n        "\n                  )\n                ]\n              )\n            })\n      ],\n      2\n    ),\n    _vm._v(" "),\n    _c("input", {\n      directives: [\n        {\n          name: "validate",\n          rawName: "v-validate",\n          value:\n            _vm.validation && _vm.validation.toString().includes("required")\n              ? "required"\n              : "",\n          expression:\n            "validation && validation.toString().includes(\'required\') ? \'required\' : \'\'"\n        },\n        {\n          name: "model",\n          rawName: "v-model",\n          value: _vm.hiddenId,\n          expression: "hiddenId"\n        }\n      ],\n      attrs: { type: "hidden", name: "hiddenId" },\n      domProps: { value: _vm.hiddenId },\n      on: {\n        input: function($event) {\n          if ($event.target.composing) {\n            return\n          }\n          _vm.hiddenId = $event.target.value\n        }\n      }\n    })\n  ])\n}\nvar VueAutocompletionValidvue_type_template_id_4053cb78_staticRenderFns = []\nVueAutocompletionValidvue_type_template_id_4053cb78_render._withStripped = true\n\n\n// CONCATENATED MODULE: ./src/VueAutocompletionValid.vue?vue&type=template&id=4053cb78&\n\n// CONCATENATED MODULE: ./node_modules/babel-loader/lib!./node_modules/vue-loader/lib??vue-loader-options!./src/VueAutocompletionValid.vue?vue&type=script&lang=js&\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n\n/* harmony default export */ var VueAutocompletionValidvue_type_script_lang_js_ = ({\n    name: \'vue-autocompletion-valid\',\n    inject: ["$validator"],\n    props: VueAutocompletionLogic.loadProps(true),\n    computed: VueAutocompletionLogic.loadComputed(true),\n    methods: VueAutocompletionLogic.loadMethods(true),\n    watch: VueAutocompletionLogic.loadWatch(),\n    updated() {\n        return VueAutocompletionLogic.updated(this);\n    },\n    mounted() {\n        return VueAutocompletionLogic.mounted(this);\n    },\n\n    destroyed: function () {\n        document.removeEventListener(\'click\', this.handleClickOutside);\n    },\n    data: function () {\n        return {\n            isOpen: false,\n            results: [],\n            search: \'\',\n            found: \'\',\n            randomId: this.name + \'_\' + Math.floor(Math.random() * 10000 + 1),\n            hiddenId: \'\',\n            isLoading: false,\n            resultSet: false,\n            arrowCounter: 0,\n            lastSearch: \'\',\n            searchChanged: false,\n            currentSelected: \'\'\n        };\n    }\n});\n// CONCATENATED MODULE: ./src/VueAutocompletionValid.vue?vue&type=script&lang=js&\n /* harmony default export */ var src_VueAutocompletionValidvue_type_script_lang_js_ = (VueAutocompletionValidvue_type_script_lang_js_); \n// CONCATENATED MODULE: ./src/VueAutocompletionValid.vue\n\n\n\n\n\n\n/* normalize component */\n\nvar VueAutocompletionValid_component = Object(componentNormalizer["a" /* default */])(\n  src_VueAutocompletionValidvue_type_script_lang_js_,\n  VueAutocompletionValidvue_type_template_id_4053cb78_render,\n  VueAutocompletionValidvue_type_template_id_4053cb78_staticRenderFns,\n  false,\n  null,\n  null,\n  null\n  \n)\n\n/* hot reload */\nif (false) { var VueAutocompletionValid_api; }\nVueAutocompletionValid_component.options.__file = "src/VueAutocompletionValid.vue"\n/* harmony default export */ var VueAutocompletionValid = (VueAutocompletionValid_component.exports);\n// CONCATENATED MODULE: ./src/main.js\n/* concated harmony reexport VueAutocompletion */__webpack_require__.d(__webpack_exports__, "VueAutocompletion", function() { return VueAutocompletion; });\n/* concated harmony reexport VueAutocompletionValid */__webpack_require__.d(__webpack_exports__, "VueAutocompletionValid", function() { return VueAutocompletionValid; });\n\n\nwindow.VueAutocompletion = VueAutocompletion;\nwindow.VueAutocompletionValid = VueAutocompletionValid;\n/*export default {\n    install:function(Vue) {\n        Vue.component(VueAutocompletion);\n        Vue.component(VuAutocompletionValid);\n    }\n};\n*/\n/* harmony default export */ var src_main = __webpack_exports__["default"] = (VueAutocompletion);\n\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///4\n')}]);